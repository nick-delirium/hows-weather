{"version":3,"sources":["store/actions/setWeather.js","components/Button.js","containers/Button.js","store/actions/changeFinish.js","store/actions/changeAppState.js","store/actions/toggleProgress.js","components/TodayWeather.js","components/Card.js","components/List.js","components/Results.js","containers/Results.js","components/ProgressView/ProgressBackground.js","components/ProgressView/ProgressIcon.js","components/ProgressView/ProgressText.js","components/ProgressView/index.js","containers/ProgressView.js","App.js","serviceWorker.js","store/reducers/appState.js","store/reducers/weather.js","store/reducers/index.js","store/index.js","index.js"],"names":["monthNames","getDate","_ref","applicable_date","monthNum","parseInt","slice","month","day","concat","StyledButton","styled","button","_templateObject","Button","props","react_default","a","createElement","onClick","inProgress","appState","navigator","geolocation","getCurrentPosition","pos","_pos$coords","coords","latitude","longitude","setWeather","axios","get","then","r","changeFinishSt","connect","dispatch","st","type","payload","str","changeAppState","cityId","data","woeid","title","weatherList","map","catch","e","bool","toggleProgress","ButtonComponent","TodayLayout","div","TodayWeather_templateObject","CenterCol","_templateObject2","RightCol","_templateObject3","PlacedDiv","_templateObject4","center","PlacedSpan","span","_templateObject5","small","padding","d","Date","TodayWeather","name","dir","getMonth","min_temp","toFixed","max_temp","wind_direction","wind_speed","humidity","air_pressure","align","predictability","src","weather_state_abbr","alt","weather_state_name","width","the_temp","Card","Card_templateObject","CardEl","children","List","ul","List_templateObject","ListItem","li","List_templateObject2","LeftCol","List_templateObject3","List_templateObject4","List_templateObject5","ListEl","console","log","i","key","components_Card","List_CenterCol","List_RightCol","Container","Results_templateObject","Results","city","components_TodayWeather","weather","components_List","Object","toConsumableArray","ResultsComponent","Background","ProgressBackground_templateObject","ProgressBackground","ProgressIcon","className","Text","p","ProgressText_templateObject","ProgressText","Centered","ProgressView_templateObject","ProgressView","ProgressView_ProgressBackground","ProgressView_ProgressIcon","state","event","ProgressView_ProgressText","ProgressComponent","Layout","App_templateObject","App","this","finished","length","containers_Results_Results","containers_Button_Button","progress","containers_ProgressView_ProgressView","React","Component","Boolean","window","location","hostname","match","initialState","error","status","text","combineReducers","arguments","undefined","action","objectSpread","store","createStore","reducer","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","f","ReactDOM","render","es","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9b5542f7.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst monthNames = [\n  'Янв.',\n  'Фев.',\n  'Марта',\n  'Апр.',\n  'Мая',\n  'Июня',\n  'Июля',\n  'Авг.',\n  'Сен.',\n  'Окт.',\n  'Нояб.',\n  'Дек.',\n];\n\nconst getDate = ({ applicable_date }) => {\n  const monthNum = parseInt(applicable_date.slice(-5, -3));\n  const month = monthNames[monthNum-1];\n  const day = parseInt(applicable_date.slice(-2));\n  return `${day} ${month}`\n}\n\nexport default function setWeather(pos) {\n  return function(dispatch) {\n    dispatch({ type: 'CHANGE_APP_STATE', payload: 'Определяем город'})\n    axios.get(`/api/city?lat=${pos.latitude}&long=${pos.longitude}`)\n      .then(r => {\n        const cityId = r.data[0].woeid;\n        dispatch({ type: 'CHANGE_CITY', payload: r.data[0].title })\n        dispatch({ type: 'CHANGE_APP_STATE', payload: 'Спрашиваем погоду у местных'})\n        axios.get(`/api/weather?city=${cityId}`)\n          .then(r => {\n            const consolidated_weather = r.data;\n            const weatherList = consolidated_weather.map(day => {\n              day.applicable_date = getDate(day)\n              return day;\n            }) \n            dispatch({ type: 'CHANGE_PROGRESS_STATE', payload: false });\n            dispatch({ type: 'CHANGE_FINISH_STATE', payload: true });\n            dispatch({ type: 'SET_WEATHER', payload: weatherList });\n          })\n          .catch(e => {\n            dispatch({ type: 'CHANGE_PROGRESS_STATE', payload: false });\n            dispatch({ type: 'CHANGE_FINISH_STATE', payload: false });\n          });\n      })\n      .catch(e => {\n        dispatch({ type: 'CHANGE_PROGRESS_STATE', payload: false });\n        dispatch({ type: 'CHANGE_FINISH_STATE', payload: false });\n      });\n  };\n}\n","import React from 'react';\nimport axios from 'axios';\nimport styled from 'styled-components';\n\n\nconst StyledButton = styled.button`\n  background-color: #FFDE02;\n  color: black;\n  border-radius: 17px;\n  font-size: 1.5rem;\n  padding: 10px;\n  cursor: pointer;\n  border: 1px solid #C8A331;\n  &:focus {\n    outline: none\n  }\n`;\n\nconst Button = props => {\n  const handleClick = () => {\n    props.inProgress(true);\n    props.appState('Ищем Вас')\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        pos => {\n          const { latitude, longitude } = pos.coords;\n          props.setWeather({ latitude, longitude });\n        },\n        () => {\n          props.inProgress(false);\n        }\n      );\n    } else {\n      axios.get('http://localhost:8085/api/ip').then(r => {\n        // const { ip } = r.data;\n        // props.changeIp(ip); find loc by ip\n        props.changeFinishSt(true)\n        props.inProgress(false);\n      });\n    }\n  };\n  return <StyledButton onClick={handleClick}> Как погодка? </StyledButton>\n};\n\nexport default Button;\n","import { connect } from 'react-redux';\n\nimport setWeather from '../store/actions/setWeather';\nimport toggleProgress from '../store/actions/toggleProgress';\nimport changeFinish from '../store/actions/changeFinish'\nimport changeAppState from '../store/actions/changeAppState';\n\nimport ButtonComponent from '../components/Button';\n\nconst mapDispatchToProps = dispatch => ({\n  changeFinishSt: st => {\n    dispatch(changeFinish(st));\n  },\n  appState: str => {\n    dispatch(changeAppState(str))\n  },\n  setWeather: pos => {\n    dispatch(setWeather(pos));\n  },\n  inProgress: bool => {\n    dispatch(toggleProgress(bool));\n  },\n\n});\n\n\n\nexport const Button = connect(\n  () => ({}),\n  mapDispatchToProps\n)(ButtonComponent);\n","export default function changeFinish(finished) {\n  return {\n    type: 'CHANGE_FINISH_STATE',\n    payload: finished,\n  };\n}\n","export default function changeAppState(str) {\n  return {\n    type: 'CHANGE_APP_STATE',\n    payload: str,\n  };\n}\n","export default function toggleProgress(bool) {\n  return {\n    type: 'CHANGE_PROGRESS_STATE',\n    payload: bool,\n  };\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst TodayLayout = styled.div`\n  display: flex;\n  flex: 1;\n  justify-content: center;\n`;\nconst CenterCol = styled.div`\n  width: 80%\n  order: 1;\n  text-align: left;\n  border-right: 1px solid rgba(0,0,0, 0.1);\n  p {\n    margin: 2.5px 0px;\n  }\n`;\nconst RightCol = styled.div`\n  width: 20%;\n  order: 2;\n  text-align: center;\n  div {\n    position: relative;\n    top: 50%;\n    transform: translateY(-50%);\n    p {\n      margin-top: 0px;\n    }\n  }\n`;\nconst PlacedDiv = styled.div`\n  text-align: ${props => (props.center ? 'center' : 'right')};\n`;\nconst PlacedSpan = styled.span`\n  font-size: ${props => (props.small ? '0.8rem' : '1.2rem')};\n  padding: ${props => (props.padding ? '5px' : '5px 5px 0px')};\n`;\nconst weatherIconPath = name => {\n  return `https://www.metaweather.com/static/img/weather/${name}.svg`;\n};\n\nconst getRussianDirection = dir => {\n  if (dir > 315 || (dir < 45 && dir >= 0)) {\n    return 'северный';\n  } else if (dir > 45 && dir < 135) {\n    return 'восточный';\n  } else if (dir > 135 && dir < 225) {\n    return 'южный';\n  } else if (dir > 225 && dir < 315) {\n    return 'западный';\n  }\n};\nconst monthNames = [\n  'Январь',\n  'Февраль',\n  'Март',\n  'Апрель',\n  'Май',\n  'Июнь',\n  'Июль',\n  'Август',\n  'Сентябрь',\n  'Октябрь',\n  'Ноябрь',\n  'Декабрь',\n];\nconst d = new Date();\n\nconst TodayWeather = ({ props }) => (\n  <TodayLayout>\n    <CenterCol>\n      <PlacedDiv center>\n        <PlacedSpan padding>\n          {monthNames[d.getMonth()]}, {d.getDate()}\n        </PlacedSpan>\n      </PlacedDiv>\n      <p>\n        Сегодня температура будет от {props.min_temp.toFixed(1)}\n        °C и до {props.max_temp.toFixed(1)}\n        °C.{' '}\n      </p>\n      <p>\n        Ветер {getRussianDirection(props.wind_direction)}, {(props.wind_speed * 0.44704).toFixed(1)}\n        м/с.{' '}\n      </p>\n      <p>\n        Влажность: {props.humidity}\n        %, давление воздуха: {(props.air_pressure * 0.750062).toFixed(1)}\n        мм рт ст.\n      </p>\n      <PlacedDiv align=\"right\">\n        <PlacedSpan small>Точность прогноза: {props.predictability}%</PlacedSpan>\n      </PlacedDiv>\n    </CenterCol>\n    <RightCol>\n      <div>\n        <img\n          src={weatherIconPath(props.weather_state_abbr)}\n          alt={props.weather_state_name}\n          width=\"32px\"\n        />\n        <p>\n          {props.the_temp.toFixed(1)}\n          °C\n        </p>\n      </div>\n    </RightCol>\n  </TodayLayout>\n);\n\nTodayWeather.propTypes = {\n  props: PropTypes.shape({\n    id: PropTypes.number,\n    weather_state_name: PropTypes.string,\n    weather_state_abbr: PropTypes.string,\n    wind_direction_compass: PropTypes.string,\n    created: PropTypes.string,\n    applicable_date: PropTypes.string,\n    min_temp: PropTypes.number,\n    max_temp: PropTypes.number,\n    the_temp: PropTypes.number,\n    wind_speed: PropTypes.number,\n    wind_direction: PropTypes.number,\n    air_pressure: PropTypes.number,\n    humidity: PropTypes.number,\n    visibility: PropTypes.number,\n    predictability: PropTypes.number,\n  }),\n};\n\nexport default TodayWeather;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Card = styled.div`\n  background-color: white;\n  border-radius: 17px;\n  max-width: 95vw;\n  padding: 10px;\n  display: flex;\n  height: 100%;\n  align-items: center;\n  justify-content: center;\n  flex: 1;\n`;\n\nconst CardEl = ({ children }) => (\n  <Card> {children} </Card>\n)\n\n\nexport default CardEl;","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nimport Card from './Card';\n\nconst List = styled.ul`\n  display: grid;\n  padding-left: 0;\n  justify-content: center;\n  list-style: none;\n  grid-template-columns: repeat(auto-fill, 350px);\n  grid-auto-flow: dense;\n  grid-auto-rows: auto;\n  grid-gap: 8px;\n`;\n\nconst ListItem = styled.li`\n  grid-row: span 1;\n  border-radius: 10px;\n  font-size: 1.1rem;\n  max-width: 90vw;\n  @media only screen and (max-width: 764px) {\n    margin: 0 auto;\n    width: 100%;\n  }\n`;\nconst LeftCol = styled.div`\n  width: 25%;\n  order:1;\n  text-align: center;\n`;\nconst CenterCol = styled.div`\n  width: 50%\n  order: 2;\n  text-align: center;\n  border-left: 1px solid rgba(0,0,0, 0.1);\n  border-right: 1px solid rgba(0,0,0, 0.1);\n  p {\n    margin: 2.5px 0px;\n  }\n`;\nconst RightCol = styled.div`\n  width: 25%;\n  order: 3;\n  text-align: center;\n  p {\n    margin-top: 0px;\n  }\n`;\n\nconst weatherIconPath = (name) => {\n  return `https://www.metaweather.com/static/img/weather/${name}.svg`\n}\n\nconst ListEl = ({ props }) => (\n  <List>\n  {console.log(props)}\n  {props.map((day, i) => (\n    <ListItem key={i}>\n      <Card>\n        <LeftCol>\n          {day.applicable_date}\n        </LeftCol>\n        <CenterCol>\n          <p> от {day.min_temp.toFixed(1)}°C до {day.max_temp.toFixed(1)}°C </p>\n          <p> Ветер {(day.wind_speed * 0.44704).toFixed(1) }м/с </p>\n        </CenterCol>\n        <RightCol>\n          <img src={weatherIconPath(day.weather_state_abbr)} alt={day.weather_state_name} width='32px'/>\n          <p>{day.the_temp.toFixed(1)}°C</p>\n        </RightCol>\n      </Card>\n    </ListItem>\n  ))}\n  </List>\n)\n\nListEl.propTypes = {\n  props: PropTypes.arrayOf(PropTypes.object).isRequired\n}\n\nexport default ListEl;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport TodayWeather from './TodayWeather';\nimport List from './List';\nimport Card from './Card';\n\nconst Container = styled.div`\n  width: 95%;\n  text-align: center;\n`;\n\n\nconst Results = props => (\n  <Container>\n    <h2> {props.appState.city} </h2>\n    <Card>\n      <TodayWeather props={props.weather[0]} />\n    </Card>\n    <List props={[...props.weather.slice(1)]} />\n  </Container>\n);\n\nResults.propTypes = {\n  weather: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default Results;\n","import { connect } from 'react-redux';\nimport ResultsComponent from '../components/Results';\n\nconst mapStateToProps = ({ weather, appState }) => ({\n  weather,\n  appState,\n});\n\n\nexport const Results = connect(\n  mapStateToProps\n)(ResultsComponent);\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Background = styled.div`\n  background-color: rgba(0,0,0,0.6);\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n`\n\nconst ProgressBackground = ({children}) => (\n  <Background> {children} </Background>\n)\n\nexport default ProgressBackground;","import React from 'react';\nimport './progressAnimation.css';\n\nconst ProgressIcon = () => (\n  <div className=\"lds-ellipsis\">\n    <div></div><div></div><div></div><div></div>\n  </div>\n)\n\nexport default ProgressIcon;","import React from 'react';\nimport styled from 'styled-components';\n\nconst Text = styled.p`\n  color: rgba(255,255,255, 0.7);\n  font-size: 1.2rem;\n  margin-top:0px;\n`;\n\nconst ProgressText = ({children}) => (\n  <Text>{children}</Text>\n)\n\nexport default ProgressText;","import React from 'react';\nimport styled from 'styled-components';\n\nimport ProgressBackground from './ProgressBackground';\nimport ProgressIcon from './ProgressIcon';\nimport ProgressText from './ProgressText'\n\nconst Centered = styled.div`\n  position: fixed;\n  top: calc(50% + 32px);\n  text-align: center;\n  width: 100%;\n`;\n\nconst ProgressView = props => (\n  <ProgressBackground>\n    <ProgressIcon />\n    <Centered>\n      {props.appState.state.map((event, i) => (\n        <ProgressText key={i}>{event}</ProgressText>\n      ))}\n    </Centered>\n  </ProgressBackground>\n);\n\nexport default ProgressView;","import { connect } from 'react-redux';\nimport ProgressComponent from '../components/ProgressView';\n\nconst mapStateToProps = ({ appState }) => ({ appState});\n\nexport const ProgressView = connect(mapStateToProps)(ProgressComponent);","import React from 'react';\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\n\nimport { Button } from './containers/Button';\nimport { Results } from './containers/Results';\nimport { ProgressView } from './containers/ProgressView';\n\nconst Layout = styled.div`\n  background: linear-gradient(to right, purple, #ff93a6);\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n`;\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Layout>\n        {this.props.appState.finished && this.props.weather.length > 0 ? <Results /> : <Button />}\n        {this.props.appState.progress && <ProgressView />}\n      </Layout>\n    );\n  }\n}\n\nconst mapStateToProps = ({ appState, weather }) => ({ appState, weather });\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n  city: '',\n  progress: false,\n  state: [],\n  finished: false,\n  error: {\n    status: false,\n    text: '',\n  },\n};\n\nexport default function appState(state = initialState, action) {\n  switch (action.type) {\n    case 'CHANGE_APP_STATE':\n      return { ...state, state: [...state.state, action.payload]}\n    case 'CHANGE_PROGRESS_STATE':\n      return { ...state, progress: action.payload };\n    case 'CHANGE_FINISH_STATE':\n      return { ...state, finished: action.payload };\n    case 'CHANGE_CITY':\n      return { ...state, city: action.payload };\n    default:\n      return state;\n  }\n}\n","const initialState = [];\n\nexport default function weather(state = initialState, action) {\n  switch (action.type) {\n    case 'SET_WEATHER':\n      return [...action.payload];\n    default:\n      return state;\n  }\n}","import { combineReducers } from 'redux';\n\nimport appState from './appState';\nimport weather from './weather';\n\nexport default combineReducers({\n  appState,\n  weather,\n});\n","import { createStore, compose, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport reducer from \"./reducers\";\n\nconst store = createStore(\n  reducer,\n  compose(\n    applyMiddleware(thunk),\n    typeof window === \"object\" &&\n    typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== \"undefined\"\n      ? window.__REDUX_DEVTOOLS_EXTENSION__()\n      : f => f\n  )\n);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  ,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}